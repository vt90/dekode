{"version":3,"sources":["constants/index.js","components/Addresses/Reports/TransactionsFlow/index.js","containers/Address/Details/styles.js","containers/Address/Details/Activity/index.js","containers/Address/Details/Header/index.js","containers/Address/Details/TransactionsTable/index.js","containers/Address/Details/index.js","config/http.js","actions/addresses.js"],"names":["DATE_FORMAT","windowSize","_ref","analysedAddress","chartData","onAddressChange","windowWidth","chartHeight","nodes","length","maxNodes","maxBy","react_default","a","createElement","lib_default","option","displayNodes","xOffset","x","forEach","node","yOffset","y","address","index","isAnalysed","id","toLowerCase","symbol","concat","push","name","value","symbolSize","getPositions","_getTransactions","transactions","sentForward","sentBackward","transaction","from","to","n","fromName","toName","coords","getTransactions","backgroundColor","tooltip","trigger","formatter","geo","map","label","emphasis","show","roam","itemStyle","normal","areaColor","borderColor","series","type","coordinateSystem","zlevel","rippleEffect","brushType","period","scale","showEffectOn","color","data","large","props","_props$data","filter","moment","timeStamp","format","effect","constantSpeed","trailLength","lineStyle","width","opacity","curveness","_props$data2","getChartOptions","style","height","onEvents","click","event","componentType","componentSubType","styles","theme","accountBalanceCard","padding","accountBalanceHeader","alignItems","display","marginTop","& svg","fontSize","accountBalanceContent","flexGrow","textAlign","wordBreak","& span","& h2","totalBalance","background","totalOutcome","totalIncome","totalTransactions","transactionsFlow","tableRow","& td","maxWidth","overflow","textOverflow","income","outcome","ownAddress","& *","fontWeight","transactionsFlowHeader","& > div","axisPointer","legend","top","align","orient","symbolKeepAspect","textStyle","grid","left","containLabel","xAxis","axisLine","onZero","yAxis","splitLine","dataZoom","xAxisIndex","filterMode","TransactionsTable","getActivityChart","groupedByTimestamp","groupBy","trs","transactionDates","Object","keys","minDate","min","date","maxDate","max","startDate","chartDates","diff","add","sendData","receivedData","balanceData","dayBalance","daySent","dayReceived","dateTransactions","stack","smooth","_this$props","this","classes","_this$getActivityChar","CardContent_default","Grid_default","container","spacing","item","xs","Paper_default","elevation","objectSpread","Component","withStyles","balance","sm","md","className","Wallet_default","Typography_default","variant","gutterBottom","final_balance","ArrowDownBoldCircle_default","total_received","ArrowUpBoldCircle_default","total_sent","PollBox_default","final_n_tx","state","sentTransactions","receivedTransactions","fromAddress","toAddress","minValue","maxValue","onFilterChange","_this","setState","defineProperty","_this2","_this$state","TextField_default","fullWidth","disableUnderline","onChange","ev","target","margin","FormControl_default","component","FormLabel_default","FormGroup_default","row","FormControlLabel_default","control","Checkbox_default","checked","Table_default","TableHead_default","TableRow_default","TableCell_default","numeric","TableBody_default","includes","key","hash","hover","Link","TABS","activity","flow chart","AddressDetails","currentTab","getAddressDetails","params","selectedAddress","blockchainId","getAddressTransactionFlow","_this$props2","levelsBefore","levelsAfter","handleTabChange","_this$props3","selectAddress","match","newProps","_this$props4","oldAddress","newAddress","_this$props5","addressDetails","goToAddressDetails","isLoading","Loading","Header","react","AppBar_default","position","Tabs_default","indicatorColor","textColor","scrollable","scrollButtons","Tab_default","Details_TransactionsTable","Activity","InputLabel_default","Select_default","inputProps","MenuItem_default","Reports_TransactionsFlow","withConnect","connect","addresses","dispatch","http","axios","create","baseURL","interceptors","response","use","error","Promise","reject","message","getAddressDetailsSuccess","addressesConstants","ON_GET_ADDRESSES_DETAILS_SUCCESS","payload","getAddresseTransactionFlowInit","ON_GET_ADDRESSES_TRANSACTIONS_FLOW_INIT","getAddresses","asyncToGenerator","regenerator_default","mark","_callee","addressInfoList","wrap","_context","prev","next","ON_GET_ADDRESSES_INIT","get","sent","ON_GET_ADDRESSES_SUCCESS","t0","ON_GET_ADDRESSES_FAILURE","onNotificationErrorInit","stop","_x","apply","arguments","_ref2","_callee2","_context2","ON_GET_ADDRESSES_DETAILS_INIT","post","ON_GET_ADDRESSES_DETAILS_FAILURE","_x2","_ref3","_callee3","_context3","ON_GET_ADDRESSES_TRANSACTIONS_FLOW_SUCCESS","ON_GET_ADDRESSES_TRANSACTIONS_FLOW_FAILURE","_x3","ON_SELECT_ADDRESS"],"mappings":"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","file":"static/js/2.bbefbbf7.chunk.js","sourcesContent":["/**\n * Created by vladtomsa on 26/09/2018\n */\nexport const DATE_FORMAT = 'YYYY-MM-DD';\n\nexport const DATE_TIME_FORMAT = 'YYYY-MM-DD HH:mm';\n","/**\n * Created by vladtomsa on 26/11/2018\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport windowSize from 'react-window-size';\nimport ReactTransactionsFlow from 'echarts-for-react';\nimport maxBy from 'lodash/maxBy';\nimport moment from 'moment';\nimport { DATE_TIME_FORMAT } from '../../../../constants';\n\nconst GRAPH_ITEM_HEIGHT = 100;\n\nconst TransactionsFlow = ({analysedAddress, chartData, onAddressChange, windowWidth}) => {\n  let chartHeight = 0;\n\n  if (chartData && chartData.nodes && chartData.nodes.length) {\n    const maxNodes = maxBy(chartData.nodes, (nodes) => nodes.length);\n\n    chartHeight = maxNodes.length * GRAPH_ITEM_HEIGHT;\n  }\n\n  const getPositions = () => {\n    const {nodes} = chartData;\n    const displayNodes = [];\n    const xOffset = (windowWidth - 120) / (nodes.length - 1);\n    let x = 60;\n\n    nodes.forEach((node) => {\n      const yOffset = (chartHeight - node.length * GRAPH_ITEM_HEIGHT) / (node.length + 1);\n      let y = yOffset + GRAPH_ITEM_HEIGHT;\n\n      node.forEach((address, index) => {\n        const isAnalysed = address.id.toLowerCase() === analysedAddress.toLowerCase();\n        const symbol = `image:///icons/${ isAnalysed ? 'incognito' : 'account'}.png`;\n        displayNodes.push({\n          name: address.id,\n          value: [x, y, 4],\n          symbolSize: isAnalysed ? 58 : 50,\n          symbol,\n          // itemStyle: {\n          //   normal: {\n          //     color: isAnalysed ? '#FFFFFF' : '#F58158',\n          //   }\n          // }\n        });\n\n        y += GRAPH_ITEM_HEIGHT + yOffset;\n      });\n\n      x += xOffset;\n    });\n\n    return displayNodes;\n  };\n\n  const getTransactions = (nodes) => {\n    const {transactions} = chartData;\n    const sentForward = [];\n    const sentBackward = [];\n\n    transactions.forEach((transaction) => {\n      let from;\n      let to;\n\n      nodes.forEach((n) => {\n        if (n.name.toLowerCase() === transaction.from.toLowerCase()) from = n;\n\n        if (n.name.toLowerCase() === transaction.to.toLowerCase()) to = n;\n      });\n\n      // on the X axis\n      if (from.value[0] < to.value[0]) {\n        sentForward.push({\n          fromName: transaction.from.toLowerCase(),\n          toName: transaction.to.toLowerCase(),\n          coords: [[from.value[0], from.value[1]], [to.value[0], to.value[1]]],\n          transaction,\n        })\n      }\n      else {\n        sentBackward.push({\n          fromName: transaction.from.toLowerCase(),\n          toName: transaction.to.toLowerCase(),\n          coords: [[from.value[0], from.value[1]], [to.value[0], to.value[1]]],\n          transaction,\n        })\n      }\n\n    });\n\n    return {\n      sentForward,\n      sentBackward,\n    };\n  };\n\n  const getChartOptions = () => {\n    const displayNodes = getPositions();\n\n    const {sentForward, sentBackward} = getTransactions(displayNodes);\n\n    return {\n      backgroundColor: 'rgba(0,0,0,0)',\n      // title: {\n      //   text: 'Transactions flow',\n      //   subtext: 'Address here'\n      // },\n      tooltip: {\n        trigger: 'item',\n        formatter: \"{b}\"\n      },\n      // toolbox: {\n      //   feature: {\n      //     dataView: {readOnly: false},\n      //     restore: {},\n      //     saveAsImage: {}\n      //   }\n      // },\n      // legend: {\n      //     data: ['展现','点击','访问','咨询','订单']\n      // },\n      geo: {\n        map: 'Position map',\n        label: {\n          emphasis: {\n            show: false\n          }\n        },\n        roam: true,\n        itemStyle: {\n          normal: {\n            areaColor: '#323c48',\n            borderColor: '#404a59'\n          },\n          emphasis: {\n            areaColor: '#2a333d'\n          }\n        }\n      },\n      series: [\n        // position addresses on map\n        {\n          name: 'Addresses',\n          //type: 'effectScatter',\n          type: 'scatter',\n          coordinateSystem: 'geo',\n          zlevel: 2,\n          rippleEffect: {\n            brushType: 'stroke',\n            period: 7,\n            scale: 26\n          },\n          label: {\n            // normal: {\n            //     show: true,\n            //     position: 'top',\n            //     formatter: '{b}',\n            //     color: 'white',\n            // },\n            // emphasis: {\n            //   show: true,\n            //   // position: 'right',\n            //   formatter: '{b}',\n            //   color: 'white',\n            // }\n          },\n          showEffectOn: 'render',\n          itemStyle: {\n            normal: {\n              color: '#46bee9'\n            }\n          },\n          data: displayNodes,\n        },\n        // create lines for sent transactions\n        {\n          name: 'Sent transactions',\n          type: 'lines',\n          coordinateSystem: 'geo',\n          zlevel: 2,\n          large: true,\n          tooltip: {\n            trigger: 'item',\n            formatter: (props) => {\n              const { data: { fromName, toName } } = props;\n              let tooltip = `From <b>${fromName}</b><br>To <b>${toName}</b><br><br>Transactions:<br>`;\n\n              sentForward\n                .filter((data) => data.fromName === fromName && data.toName === toName)\n                .map((data) => data.transaction)\n                .forEach((transaction, index) => {\n                  tooltip += `${index + 1}: <b>${transaction.value}</b> ETH (${moment(transaction.timeStamp * 1000).format(DATE_TIME_FORMAT)})<br>`;\n                });\n\n              return tooltip;\n            }\n          },\n          effect: {\n            show: true,\n            constantSpeed: 30,\n            symbol: 'arrow',//ECharts 提供的标记类型包括 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow'\n            symbolSize: 8,\n            trailLength: 0,\n          },\n\n          lineStyle: {\n            normal: {\n              color: '#66bb6a',\n              width: 3,\n              opacity: 0.6,\n              curveness: 0.1\n            }\n          },\n          data: sentForward,\n        },\n        {\n          name: '线路',\n          type: 'lines',\n          coordinateSystem: 'geo',\n          zlevel: 2,\n          large: true,\n          tooltip: {\n            trigger: 'item',\n            formatter: (props) => {\n              const { data: { fromName, toName } } = props;\n              let tooltip = `From <b>${fromName}</b><br>To <b>${toName}</b><br><br>Transactions:<br>`;\n\n              sentBackward\n                .filter((data) => data.fromName === fromName && data.toName === toName)\n                .map((data) => data.transaction)\n                .forEach((transaction, index) => {\n                  tooltip += `${index + 1}: <b>${transaction.value}</b> ETH (${moment(transaction.timeStamp * 1000).format(DATE_TIME_FORMAT)})<br>`;\n                });\n\n              return tooltip;\n            }\n          },\n          effect: {\n            show: true,\n            constantSpeed: 30,\n            symbol: 'arrow',\n            symbolSize: 8,\n            trailLength: 0,\n          },\n          lineStyle: {\n            normal: {\n              color: '#ffa726',\n              width: 3,\n              opacity: 1,\n              curveness: 0.2\n            }\n          },\n          data: sentBackward\n        }\n      ]\n    };\n  };\n\n  const onChartClick = (event) => {\n    const {componentType, componentSubType, name, type} = event;\n\n    if (\n      type === 'click'\n      && componentType === 'series'\n      && componentSubType === 'scatter'\n    ) {\n      onAddressChange(name);\n    }\n  };\n\n  return (\n    <div>\n      {\n        chartData\n        && chartData.nodes\n        && chartData.nodes.length\n          ? (\n            <div>\n              <ReactTransactionsFlow\n                option={getChartOptions()}\n                style={{height: chartHeight + 300}}\n                onEvents={{\n                  click: onChartClick\n                }}\n              />\n            </div>\n          )\n          : null\n      }\n    </div>\n  );\n};\n\nTransactionsFlow.propTypes = {\n  analysedAddress: PropTypes.string.isRequired,\n  chartData: PropTypes.object.isRequired,\n  onAddressChange: PropTypes.func.isRequired,\n  windowWidth: PropTypes.number.isRequired,\n};\n\nexport default windowSize(TransactionsFlow);\n","/**\n * Created by vladtomsa on 26/11/2018\n */\nconst styles = (theme) => {\n  return {\n    accountBalanceCard: {\n      padding: 12,\n      height: '100%',\n    },\n    accountBalanceHeader: {\n      alignItems: 'flex-end',\n      display: 'flex',\n      marginTop: -24,\n\n      '& svg': {\n        color: '#FFF',\n        fontSize: 46,\n      },\n    },\n    accountBalanceContent: {\n      flexGrow: 1,\n      textAlign: 'right',\n      wordBreak: 'break-all',\n      '& span': {\n        marginTop: 20,\n      },\n      '& h2': {\n        fontSize: '1rem',\n      },\n    },\n    totalBalance: {\n      background: 'linear-gradient(60deg,#ec407a,#d81b60)',\n      padding: 8,\n    },\n    totalOutcome: {\n      background: 'linear-gradient(60deg,#ffa726,#fb8c00)',\n      padding: 8,\n    },\n    totalIncome: {\n      background: 'linear-gradient(60deg,#66bb6a,#43a047)',\n      padding: 8,\n    },\n    totalTransactions: {\n      background: 'linear-gradient(60deg,#26c6da,#00acc1)',\n      padding: 8,\n    },\n    transactionsFlow: {\n      background: 'linear-gradient(45deg, #616161, #212121)',\n    },\n    tableRow: {\n      '& td': {\n        maxWidth: 160,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      }\n    },\n    income: {\n      color: '#43a047',\n    },\n    outcome: {\n      color: '#fb8c00'\n    },\n    ownAddress: {\n      '& *': {\n        fontWeight: 700,\n      }\n    },\n    transactionsFlowHeader: {\n      padding: '46px 46px 0px',\n      '& *': {\n        color: 'rgba(255,255,255,0.9)'\n      },\n      '& > div': {\n        width: 120,\n        maxWidth: '100%',\n      },\n    },\n    filter: {\n      background: 'linear-gradient(45deg, #616161, #212121)',\n      '& *': {\n        color: '#FFF'\n      },\n    }\n  };\n};\n\nexport default styles;\n","/**\n * Created by vladtomsa on 27/11/2018\n */\n/**\n * Created by vladtomsa on 27/11/2018\n */\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Echart from 'echarts-for-react';\n\nimport moment from 'moment';\nimport groupBy from 'lodash/groupBy';\nimport {DATE_FORMAT} from '../../../../constants';\nimport styles from '../styles';\n\n\nconst option = {\n  // title: {\n  //   text: 'Account history',\n  //   x: 'center',\n  //   align: 'right'\n  // },\n  backgroundColor: 'rgba(0,0,0,0)',\n  color: ['#66bb6a', '#ffa726', 'rgba(0, 0, 0, 0.5)'],\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'shadow'\n    }\n  },\n  legend: {\n    x: 'right',\n    top: '8%',\n    align: 'left',\n    orient: 'vertical',\n    data: ['Sent', 'Received', 'Balance'],\n    symbolKeepAspect: false,\n    textStyle: {\n      color: '#666',\n    },\n  },\n  grid: {\n    top: '5%%',\n    left: '5%',\n    // right: '5%',\n    // bottom: '5%',\n    containLabel: true\n  },\n  xAxis: {\n    type: 'value',\n    axisLine: {onZero: false}\n  },\n  yAxis: {\n    type: 'value',\n    splitLine: {\n      show: false,\n      lineStyle: {\n        color: ['#f2f2f2']\n      }\n    },\n    axisLine: {onZero: false}\n  },\n  dataZoom: [\n    {\n      type: 'slider',\n      xAxisIndex: 0,\n      filterMode: 'empty'\n    },\n    // {\n    //   type: 'slider',\n    //   yAxisIndex: 0,\n    //   filterMode: 'empty'\n    // },\n  ],\n};\n\n\nclass TransactionsTable extends Component {\n\n  getActivityChart = (address, transactions) => {\n    const groupedByTimestamp = groupBy(transactions, (trs) => moment(trs.timeStamp * 1000).format(DATE_FORMAT));\n    const transactionDates = Object.keys(groupedByTimestamp);\n\n    const minDate = moment.min(transactionDates.map(date => moment(date)));\n    const maxDate = moment.max(transactionDates.map(date => moment(date)));\n\n    const startDate = moment(minDate);\n\n    const chartDates = [];\n\n    while (maxDate.diff(startDate, 'days') >= 0) {\n      chartDates.push(startDate.format(DATE_FORMAT));\n\n      startDate.add(1, 'days');\n    }\n\n    const sendData = [];\n    const receivedData = [];\n    const balanceData = [];\n\n    chartDates.forEach((date, index) => {\n      const previousBalance = balanceData[index - 1] || 0;\n      let dayBalance = previousBalance;\n      let daySent = 0;\n      let dayReceived = 0;\n\n      const dateTransactions = groupedByTimestamp[date];\n\n      if (dateTransactions && dateTransactions.length) {\n        dateTransactions.forEach((trs) => {\n          if (trs.to.toLowerCase() === address.toLowerCase()) {\n            dayReceived += trs.value;\n            dayBalance += trs.value;\n          }\n\n          if (trs.from.toLowerCase() === address.toLowerCase()) {\n            daySent += trs.value;\n            dayBalance -= trs.value;\n          }\n        })\n      }\n\n      sendData.push(daySent);\n      receivedData.push(dayReceived);\n      balanceData.push(dayBalance);\n    });\n\n    const series = [\n      {\n        name: 'Sent',\n        type: 'bar',\n        stack: 'day',\n        data: sendData,\n      },\n      {\n        name: 'Received',\n        type: 'bar',\n        stack: 'day',\n        data: receivedData,\n        // markArea: areaStyle\n      },\n      {\n        name: 'Balance',\n        type: 'line',\n        stack: 'day',\n        data: balanceData,\n        symbolSize: 0,\n        smooth: true,\n        lineStyle: {\n          normal: {\n            width: 2,\n            opacity: 1,\n          },\n        },\n      },\n    ];\n\n    return {\n      series,\n      xAxis: [{\n        type: 'category',\n        data: chartDates,\n      }],\n    }\n  };\n\n  render() {\n    const {address, classes, transactions} = this.props;\n\n    const {series, xAxis} = this.getActivityChart(address, transactions);\n\n    return (\n      <CardContent>\n        <Grid container spacing={16}>\n          <Grid item xs={12}>\n            <Paper elevation={12}>\n              <Echart\n                option={{...option, series, xAxis}}\n                style={{height: 600}}\n              />\n            </Paper>\n          </Grid>\n        </Grid>\n\n      </CardContent>\n    );\n  }\n}\n\nTransactionsTable.propTypes = {\n  address: PropTypes.string.isRequired,\n  classes: PropTypes.object.isRequired,\n  transactions: PropTypes.array.isRequired,\n};\n\nexport default withStyles(styles)(TransactionsTable);\n","/**\n * Created by vladtomsa on 27/11/2018\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Income from 'mdi-material-ui/ArrowDownBoldCircle';\nimport Outcome from 'mdi-material-ui/ArrowUpBoldCircle';\nimport Transactions from 'mdi-material-ui/PollBox';\nimport Wallet from 'mdi-material-ui/Wallet';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from '../styles';\n\nconst AddressDetailsHeader = ({ address, balance, classes }) => {\n  return (\n    <Grid container spacing={24}>\n      <Grid item xs={12} sm={6} md={3}>\n        <Paper className={classes.accountBalanceCard} elevation={6}>\n          <div className={classes.accountBalanceHeader}>\n            <Paper className={classes.totalBalance} elevation={4}>\n              <Wallet />\n            </Paper>\n\n            <div className={classes.accountBalanceContent}>\n              <Typography variant=\"caption\" color=\"textSecondary\" gutterBottom>\n                Total balance\n              </Typography>\n\n              <Typography variant=\"title\" gutterBottom>\n                { balance.final_balance }\n              </Typography>\n            </div>\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12} sm={6} md={3}>\n        <Paper className={classes.accountBalanceCard} elevation={6}>\n          <div className={classes.accountBalanceHeader}>\n            <Paper className={classes.totalIncome} elevation={4}>\n              <Income />\n            </Paper>\n\n            <div className={classes.accountBalanceContent}>\n              <Typography variant=\"caption\" color=\"textSecondary\" gutterBottom>\n                Total received\n              </Typography>\n\n              <Typography variant=\"title\" gutterBottom>\n                { balance.total_received }\n              </Typography>\n            </div>\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12} sm={6} md={3}>\n        <Paper className={classes.accountBalanceCard} elevation={6}>\n          <div className={classes.accountBalanceHeader}>\n            <Paper className={classes.totalOutcome} elevation={4}>\n              <Outcome />\n            </Paper>\n\n            <div className={classes.accountBalanceContent}>\n              <Typography variant=\"caption\" color=\"textSecondary\" gutterBottom>\n                Total sent\n              </Typography>\n\n              <Typography variant=\"title\" gutterBottom>\n                { balance.total_sent }\n              </Typography>\n            </div>\n          </div>\n        </Paper>\n      </Grid>\n\n      <Grid item xs={12} sm={6} md={3}>\n        <Paper className={classes.accountBalanceCard} elevation={6}>\n          <div className={classes.accountBalanceHeader}>\n            <Paper className={classes.totalTransactions} elevation={4}>\n              <Transactions />\n            </Paper>\n\n            <div className={classes.accountBalanceContent}>\n              <Typography variant=\"caption\" color=\"textSecondary\" gutterBottom>\n                Transactions\n              </Typography>\n\n              <Typography variant=\"title\" gutterBottom>\n                { balance.final_n_tx }\n              </Typography>\n            </div>\n          </div>\n        </Paper>\n      </Grid>\n    </Grid>\n  )\n};\n\nAddressDetailsHeader.propTypes = {\n  address: PropTypes.string.isRequired,\n  balance: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AddressDetailsHeader);\n","/**\n * Created by vladtomsa on 27/11/2018\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport CardContent from '@material-ui/core/CardContent';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Income from 'mdi-material-ui/ArrowDownBoldCircle';\nimport Outcome from 'mdi-material-ui/ArrowUpBoldCircle';\nimport moment from 'moment';\n\nimport { DATE_TIME_FORMAT } from '../../../../constants';\nimport styles from '../styles';\n\nclass TransactionsTable extends Component {\n  state = {\n    sentTransactions: true,\n    receivedTransactions: true,\n    fromAddress: '',\n    toAddress: '',\n    minValue: null,\n    maxValue: null,\n  };\n\n  onFilterChange = (name) => (value) => {\n    this.setState({ [name]: value })\n  };\n\n  render() {\n    const { address, classes, transactions } = this.props;\n    const { fromAddress, receivedTransactions, sentTransactions, toAddress } = this.state;\n\n    return (\n      <div>\n        <CardContent>\n          <Paper elevation={6} className={classes.filter}>\n            <CardContent>\n              <Typography variant=\"h5\" color=\"textPrimary\">\n                Filter\n              </Typography>\n\n              <Grid container spacing={16}>\n                <Grid item xs={12} md={6}>\n                  <TextField\n                    label=\"From\"\n                    fullWidth\n                    disableUnderline\n                    value={fromAddress}\n                    onChange={(ev) => this.onFilterChange('fromAddress')(ev.target.value)}\n                    margin=\"normal\"\n                  />\n                </Grid>\n\n                <Grid item xs={12} md={6}>\n                  <TextField\n                    label=\"From\"\n                    fullWidth\n                    disableUnderline\n                    value={toAddress}\n                    onChange={(ev) => this.onFilterChange('toAddress')(ev.target.value)}\n                    margin=\"normal\"\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">Type</FormLabel>\n                    <FormGroup row>\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            checked={sentTransactions}\n                            onChange={(ev) => this.onFilterChange('sentTransactions')(ev.target.checked)}\n                          />\n                        }\n                        label=\"Sent\"\n                      />\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            checked={receivedTransactions}\n                            onChange={(ev) => this.onFilterChange('receivedTransactions')(ev.target.checked)}\n                          />\n                        }\n                        label=\"Received\"\n                      />\n                    </FormGroup>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Paper>\n        </CardContent>\n\n        <br />\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell numeric>Type</TableCell>\n              <TableCell>From</TableCell>\n              <TableCell>To</TableCell>\n              <TableCell>TX Hash</TableCell>\n              <TableCell>Timestamp</TableCell>\n              <TableCell numeric>Value (ETH)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {transactions\n              .filter((trs) => {\n                let isValid = true;\n\n                const { from, to } = trs;\n\n                if (!from.toLowerCase().includes(fromAddress.toLowerCase())) return false;\n\n                if (!to.toLowerCase().includes(toAddress.toLowerCase())) return false;\n\n                if (!receivedTransactions && to.toLowerCase() === address) return false;\n\n                if (!sentTransactions && from.toLowerCase() === address) return false;\n\n                return isValid;\n              })\n              .map(transaction => {\n                return (\n                  <TableRow key={transaction.hash} className={classes.tableRow} hover>\n                    <TableCell numeric>\n                      {\n                        transaction.from.toLowerCase() === address\n                          ? <Outcome className={classes.outcome}/>\n                          : <Income className={classes.income}/>\n                      }\n                    </TableCell>\n                    <TableCell className={transaction.from.toLowerCase() === address ? classes.ownAddress : ''}>\n                      <Link to={`/address/${transaction.from}`}>\n                        <Typography color=\"primary\">\n                          { transaction.from }\n                        </Typography>\n                      </Link>\n                    </TableCell>\n                    <TableCell className={transaction.to.toLowerCase() === address ? classes.ownAddress : ''}>\n                      <Link to={`/address/${transaction.to}`}>\n                        <Typography color=\"primary\">\n                          { transaction.to }\n                        </Typography>\n                      </Link>\n                    </TableCell>\n                    <TableCell>{ transaction.hash }</TableCell>\n                    <TableCell>{ moment(transaction.timeStamp * 1000).format(DATE_TIME_FORMAT) }</TableCell>\n                    <TableCell numeric>{ transaction.value }</TableCell>\n                  </TableRow>\n                );\n            })}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nTransactionsTable.propTypes = {\n  address: PropTypes.string.isRequired,\n  classes: PropTypes.object.isRequired,\n  transactions: PropTypes.array.isRequired,\n};\n\nexport default withStyles(styles)(TransactionsTable);\n","/**\n * Created by vladtomsa on 26/11/2018\n */\nimport React, {Component, Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\nimport {push} from 'react-router-redux';\nimport {withStyles} from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport CardContent from '@material-ui/core/CardContent';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nimport Typography from '@material-ui/core/Typography';\nimport {getAddressDetails, getAddressTransactionFlow, selectAddress} from '../../../actions/addresses';\nimport Loading from '../../../components/Loading';\nimport TransactionsFlow from '../../../components/Addresses/Reports/TransactionsFlow';\nimport Activity from './Activity';\nimport AddressDetailsHeader from './Header';\nimport TransactionsTable from './TransactionsTable';\nimport styles from './styles';\n\nconst TABS = {\n  transactions: 0,\n  activity: 1,\n  'flow chart': 2,\n};\n\nclass AddressDetails extends Component {\n  state = {\n    currentTab: TABS.activity,\n  };\n\n  componentDidMount() {\n    const {\n      selectAddress,\n      match: {params: {address}}\n    } = this.props;\n\n    selectAddress(address);\n\n    this.getAddressDetails({ address });\n    this.getAddressTransactionFlow({address});\n  }\n\n  UNSAFE_componentWillReceiveProps(newProps) {\n    const { match, selectAddress } = this.props;\n    const oldAddress = match.params.address;\n\n    const newAddress = newProps.match.params.address;\n\n    if (oldAddress !== newAddress) {\n      selectAddress(newAddress);\n\n      this.getAddressDetails({address: newAddress});\n      this.getAddressTransactionFlow({address: newAddress});\n    }\n  }\n\n  getAddressDetails = (params) => {\n    const {\n      getAddressDetails,\n      selectedAddress,\n      blockchainId,\n    } = this.props;\n\n    getAddressDetails({\n      address: params.address || selectedAddress,\n      blockchainId: params.blockchainId || blockchainId,\n    });\n  };\n\n  getAddressTransactionFlow = (params) => {\n    const {\n      getAddressTransactionFlow,\n      selectedAddress,\n      levelsBefore,\n      levelsAfter,\n      blockchainId,\n    } = this.props;\n\n    getAddressTransactionFlow({\n      address: params.address || selectedAddress,\n      levelsBefore: params.levelsBefore || levelsBefore,\n      levelsAfter: params.levelsAfter || levelsAfter,\n      blockchainId: params.blockchainId || blockchainId,\n    });\n  };\n\n  handleTabChange = (event, value) => {\n    this.setState({ currentTab: value });\n  };\n\n  render() {\n    const {\n      addressDetails,\n      classes,\n      goToAddressDetails,\n      transactionsFlow,\n      selectedAddress,\n      levelsBefore,\n      levelsAfter,\n      blockchainId,\n      isLoading,\n    } = this.props;\n\n    const { currentTab } = this.state;\n\n    if (isLoading) return <Loading/>;\n\n    return (\n      <div>\n        <CardContent>\n          <br />\n          <Typography variant=\"h5\" color=\"textPrimary\">\n            {selectedAddress}\n          </Typography>\n          <br />\n\n          { isLoading }\n\n          <div>\n            {\n              !!addressDetails\n                ? (\n                  <AddressDetailsHeader\n                    address={selectedAddress}\n                    balance={addressDetails.balance}\n                  />\n\n                )\n                : null\n            }\n          </div>\n        </CardContent>\n\n        {\n          !!addressDetails\n            ? (\n              <Fragment>\n                <br />\n                <AppBar position=\"static\" color=\"inherit\">\n                  <Tabs\n                    value={currentTab}\n                    onChange={this.handleTabChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    scrollable\n                    scrollButtons=\"auto\"\n                  >\n                    {\n                      Object.keys(TABS)\n                        .map((key) => {\n                          return (\n                            <Tab key={key} label={key} />\n                          );\n                        })\n                    }\n                  </Tabs>\n                </AppBar>\n\n                {\n                  currentTab === TABS.transactions\n                    ? (\n                      <Paper>\n                        <TransactionsTable\n                          address={selectedAddress.toLowerCase()}\n                          transactions={addressDetails.transactions}\n                        />\n                      </Paper>\n                    )\n                    : null\n                }\n\n                {\n                  currentTab === TABS.activity\n                    ? (\n                      <Paper>\n                        <Activity\n                          address={selectedAddress.toLowerCase()}\n                          transactions={addressDetails.transactions}\n                        />\n                      </Paper>\n                    )\n                    : null\n                }\n\n                {\n                  currentTab === TABS[\"flow chart\"] && transactionsFlow\n                    ? (\n                      <Paper elevation={8} className={classes.transactionsFlow}>\n                        <div className={`flex wrap-content ${classes.transactionsFlowHeader}`}>\n                          <Typography variant=\"h4\" className=\"fill-flex\">\n                            Transactions flow\n                          </Typography>\n\n                          <FormControl>\n                            <InputLabel>\n                              Levels Before\n                            </InputLabel>\n                            <Select\n                              fullWidth\n                              value={levelsBefore}\n                              onChange={(ev) => this.getAddressTransactionFlow({ levelsBefore: ev.target.value })}\n                              disableUnderline\n                              inputProps={{\n                                label: 'Levels before'\n                              }}\n                            >\n                              <MenuItem value={0}>None</MenuItem>\n                              <MenuItem value={1}>One</MenuItem>\n                              <MenuItem value={2}>Two</MenuItem>\n                              {/*<MenuItem value={3}>Three</MenuItem>*/}\n                            </Select>\n                          </FormControl>\n\n                          &nbsp;\n                          &nbsp;\n\n                          <FormControl>\n                            <InputLabel>\n                              Levels after\n                            </InputLabel>\n                            <Select\n                              value={levelsAfter}\n                              onChange={(ev) => this.getAddressTransactionFlow({ levelsAfter: ev.target.value })}\n                              disableUnderline\n                              inputProps={{\n                                label: 'Levels after',\n                              }}\n                            >\n                              <MenuItem value={0}>None</MenuItem>\n                              <MenuItem value={1}>One</MenuItem>\n                              <MenuItem value={2}>Two</MenuItem>\n                              {/*<MenuItem value={3}>Three</MenuItem>*/}\n                            </Select>\n                          </FormControl>\n                        </div>\n\n                        <TransactionsFlow\n                          analysedAddress={selectedAddress}\n                          chartData={transactionsFlow}\n                          onAddressChange={goToAddressDetails}\n                        />\n                      </Paper>\n                    )\n                    : null\n                }\n              </Fragment>\n            )\n            : null\n        }\n      </div>\n    )\n  }\n}\n\nAddressDetails.propTypes = {};\n\nconst mapStateToProps = (state) => {\n  return {\n    addressDetails: state.addresses.addressDetails,\n    selectedAddress: state.addresses.selectedAddress,\n    transactionsFlow: state.addresses.transactionsFlow,\n    levelsBefore: state.addresses.levelsBefore,\n    levelsAfter: state.addresses.levelsAfter,\n    blockchainId: state.addresses.blockchainId,\n    isLoading: state.addresses.isLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getAddressDetails: (params) => dispatch(getAddressDetails(params)),\n    getAddressTransactionFlow: (params) => dispatch(getAddressTransactionFlow(params)),\n    goToAddressDetails: (address) => dispatch(push(`/address/${address}`)),\n    selectAddress: (address) => dispatch(selectAddress(address)),\n  };\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps)(AddressDetails);\n\nexport default withStyles(styles)(withConnect);\n","import axios from 'axios';\n\nexport const http = axios.create({\n  baseURL: `https://dekode.herokuapp.com/api`,\n});\n\nhttp.interceptors.response.use(\n  (response) => response.data,\n  (error) => {\n    if (error && error.response && error.response.data) {\n      return Promise.reject(error.response.data.message ? error.response.data.message : error.response.data);\n    } else {\n      return Promise.reject({message: 'Server error'});\n    }\n  }\n);","/**\n * Created by vladtomsa on 26/11/2018\n */\nimport { onNotificationErrorInit } from './notifications';\nimport { addressesConstants } from '../constants/addresses';\nimport { http } from '../config/http';\n\nconst getAddressesInit = () => ({ type: addressesConstants.ON_GET_ADDRESSES_INIT });\n\nconst getAddressesSuccess = (data) => ({ type: addressesConstants.ON_GET_ADDRESSES_SUCCESS, payload: data });\n\nconst getAddressesFailure = () => ({ type: addressesConstants.ON_GET_ADDRESSES_FAILURE });\n\nconst getAddressDetailsInit = () => ({ type: addressesConstants.ON_GET_ADDRESSES_DETAILS_INIT });\n\nconst getAddressDetailsSuccess = (data) => ({ type: addressesConstants.ON_GET_ADDRESSES_DETAILS_SUCCESS, payload: data });\n\nconst getAddressDetailsFailure = () => ({ type: addressesConstants.ON_GET_ADDRESSES_DETAILS_FAILURE });\n\n\nconst getAddresseTransactionFlowInit = (params) => ({ type: addressesConstants.ON_GET_ADDRESSES_TRANSACTIONS_FLOW_INIT, payload: params });\n\nconst getAddresseTransactionFlowSuccess = (data) => ({ type: addressesConstants.ON_GET_ADDRESSES_TRANSACTIONS_FLOW_SUCCESS, payload: data });\n\nconst getAddresseTransactionFlowFailure = () => ({ type: addressesConstants.ON_GET_ADDRESSES_TRANSACTIONS_FLOW_FAILURE });\n\nexport const getAddresses = () => async (dispatch) => {\n    try {\n        dispatch(getAddressesInit());\n\n        const addressInfoList = await http.get('/addresses');\n\n        dispatch(getAddressesSuccess(addressInfoList));\n    }\n    catch (e) {\n        dispatch(getAddressesFailure());\n        dispatch(onNotificationErrorInit(e));\n    }\n};\n\nexport const getAddressDetails = (data) => async (dispatch) => {\n  try {\n    dispatch(getAddressDetailsInit());\n\n    const addressDetails = await http.post('/addresses/details', data);\n\n    dispatch(getAddressDetailsSuccess(addressDetails));\n  }\n  catch (e) {\n    dispatch(getAddressDetailsFailure());\n    dispatch(onNotificationErrorInit(e));\n  }\n};\n\nexport const getAddressTransactionFlow = (params) => async (dispatch) => {\n  try {\n    dispatch(getAddresseTransactionFlowInit(params));\n\n    const response = await http.post('/addresses/transaction-flow', params);\n\n    dispatch(getAddresseTransactionFlowSuccess(response));\n  }\n  catch (e) {\n    dispatch(getAddresseTransactionFlowFailure());\n    dispatch(onNotificationErrorInit(e));\n  }\n};\n\nexport const selectAddress = (address) => {\n  return { type: addressesConstants.ON_SELECT_ADDRESS, payload: address };\n};\n"],"sourceRoot":""}
